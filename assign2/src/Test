int main (int argv, char ** argc) {
    if (argv != 2) return 0;

    Calendar * calendar = NULL;

    ICalErrorCode createCal = createCalendar(argc[1], &calendar);
    char * errorCode = printError(createCal);
    printf("Parse Status: %s\n\n\n", errorCode);
    if (strcmp(errorCode, "OK")) {
        free(errorCode);
        return 0;
    }
    char * output = printCalendar(calendar);
    
    if (output) {
        printf("%s", output);
    }

    #if DEBUG
        FILE * out = fopen("output.txt", "w");
        fprintf(out, "%s", output);
        fclose(out);
    #endif
    free(output);
    free(errorCode);
    writeCalendar("writetest2.ics", calendar);
    
    output = printError(validateCalendar(calendar));
    printf("Status: %s\n", output);
    free(output);
    
    deleteCalendar(calendar);

    // Calendar * obj = NULL;

    // obj = malloc(sizeof(Calendar));

    // obj->version = 2.0;
    // strcpy(obj->prodID, "-//hacksw/h,andcal//NONSGML v1.0//EN");
    // obj->events = initializeList(&printEvent,&deleteEvent,&compareEvents);

    // obj->properties = initializeList(&printProperty, &deleteProperty, &compareProperties);


    // Property *newCalProp = malloc(sizeof(Property) +  5000);
    // strcpy(newCalProp->propName, "CALSCALE");
    // strcpy(newCalProp->propDescr, "AWESOME");
    // insertBack(obj->properties, newCalProp);

    // Event * newEvent = calloc(1, sizeof(Event));
    // newEvent->alarms = initializeList(&printAlarm, &deleteAlarm,&compareAlarms);

    // strcpy(newEvent->creationDateTime.date, "20090901"); 
    // strcpy(newEvent->creationDateTime.time, "170000");
    // newEvent->creationDateTime.UTC = 1;

    // strcpy(newEvent->startDateTime.date, "20090901"); 
    // strcpy(newEvent->startDateTime.time, "170000");
    // newEvent->startDateTime.UTC = 0;

    // strcpy(newEvent->UID, "SOME EVENT UID");
    // newEvent->properties = initializeList(&printProperty, &deleteProperty, &compareProperties);

    // Property *newProp = malloc(sizeof(Property) + 5000);
    // strcpy(newProp->propName, "PRIORITY");
    // strcpy(newProp->propDescr, "4");
    // insertBack(newEvent->properties, newProp);

    // Property *newProp2 = malloc(sizeof(Property) + 5000);
    // strcpy(newProp2->propName, "SUMMARY");
    // strcpy(newProp2->propDescr, "Nigga got hoes bitch nigga");
    // insertBack(newEvent->properties, newProp2);


    // Property * a = malloc(sizeof(Property) + 5000);
    // strcpy(a->propName, "DURATION");
    // strcpy(a->propDescr, "Nigga got hoes bitch nigga");

    // Alarm * alarm = malloc(sizeof(Alarm) );
    // strcpy(alarm->action, "WAGWAN");
    // alarm->trigger = malloc(100);
    // strcpy(alarm->trigger, "YEET");
    // alarm->properties = initializeList(printProperty, deleteProperty, compareProperties );

    // insertBack(alarm->properties, a );
    // insertBack(newEvent->alarms, alarm);
    // insertBack(obj->events, newEvent);

    // Event * newEvent2 = calloc(1, sizeof(Event));
    // newEvent2->alarms = initializeList(&printAlarm, &deleteAlarm,&compareAlarms);

    // strcpy(newEvent2->creationDateTime.date, "20090901"); 
    // strcpy(newEvent2->creationDateTime.time, "170000");
    // newEvent2->creationDateTime.UTC = 1;

    // strcpy(newEvent2->startDateTime.date, "20090901"); 
    // strcpy(newEvent2->startDateTime.time, "170000");
    // newEvent2->startDateTime.UTC = 1;

    // strcpy(newEvent2->UID, "SOME EVENT UID");
    // newEvent2->properties = initializeList(&printProperty, &deleteProperty, &compareProperties);

    // insertBack(obj->events, newEvent2);

    // ICalErrorCode validate = validateCalendar( obj );
    // char * output = printError(validate);
    // writeCalendar("writetest.ics", obj);

    // printf("%s\n", output);

    // free(output);
    // deleteCalendar(obj);

    return 0;
}
